Index: src/main/java/persistence/GenericDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package persistence;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.hibernate.Session;\nimport org.hibernate.Transaction;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class GenericDao<T> {\n\n    private Class<T> type;\n    private final Logger logger = LogManager.getLogger(this.getClass());\n\n\n    public GenericDao(Class<T> type) {\n        this.type = type;\n    }\n\n    public GenericDao() {\n\n    }\n\n    public List<T> getAll() {\n        Session session = getSession();\n\n        CriteriaBuilder builder = session.getCriteriaBuilder();\n        CriteriaQuery<T> query = builder.createQuery(type);\n        Root<T> root = query.from(type);\n        List<T> list = session.createQuery(query).getResultList();\n        session.close();\n\n        return list;\n    }\n\n    public <T> T getById(int id) {\n        Session session = getSession();\n        T entity = (T)session.get(type, id);\n        session.close();\n        return entity;\n    }\n\n    public void delete(T entity) {\n        Session session = getSession();\n        Transaction transaction = session.beginTransaction();\n        session.delete(entity);\n        transaction.commit();\n        session.close();\n    }\n\n    public int insert(T entity) {\n        int id = 0;\n        Session session = getSession();\n        Transaction transaction = session.beginTransaction();\n        id = (int)session.save(entity);\n        transaction.commit();\n        session.close();\n        return id;\n    }\n\n    public void saveOrUpdate(T entity) {\n        Session session = getSession();\n        Transaction transaction = session.beginTransaction();\n        session.saveOrUpdate(entity);\n        transaction.commit();\n        session.close();\n    }\n\n    public List<T> findByPropertyEqual(String propertyName, Object value) {\n        Session session = getSession();\n        CriteriaBuilder builder = session.getCriteriaBuilder();\n        CriteriaQuery<T> query = builder.createQuery(type);\n        Root<T> root = query.from(type);\n        query.select(root).where(builder.equal(root.get(propertyName),value));\n\n        return session.createQuery(query).getResultList();\n    }\n\n    public List<T> findByPropertyEqual(Map<String, Object> propertyMap) {\n        Session session = getSession();\n        CriteriaBuilder builder = session.getCriteriaBuilder();\n        CriteriaQuery<T> query = builder.createQuery(type);\n        Root<T> root = query.from(type);\n        List<Predicate> predicates = new ArrayList<Predicate>();\n        for (Map.Entry entry: propertyMap.entrySet()) {\n            predicates.add(builder.equal(root.get((String) entry.getKey()), entry.getValue()));\n        }\n        query.select(root).where(builder.and(predicates.toArray(new Predicate[predicates.size()])));\n\n        return session.createQuery(query).getResultList();\n    }\n\n    private Session getSession() {\n        return main.java.persistence.SessionFactoryProvider.getSessionFactory().openSession();\n\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/persistence/GenericDao.java b/src/main/java/persistence/GenericDao.java
--- a/src/main/java/persistence/GenericDao.java	(revision ea662576257434d5c7d001d2374ecdb20c3259d5)
+++ b/src/main/java/persistence/GenericDao.java	(date 1617236301418)
@@ -13,20 +13,38 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * The type Generic dao.
+ *
+ * @param <T> the type parameter
+ */
 public class GenericDao<T> {
 
     private Class<T> type;
     private final Logger logger = LogManager.getLogger(this.getClass());
 
 
+    /**
+     * Instantiates a new Generic dao.
+     *
+     * @param type the type
+     */
     public GenericDao(Class<T> type) {
         this.type = type;
     }
 
+    /**
+     * Instantiates a new Generic dao.
+     */
     public GenericDao() {
 
     }
 
+    /**
+     * Gets all.
+     *
+     * @return the all
+     */
     public List<T> getAll() {
         Session session = getSession();
 
@@ -39,6 +57,13 @@
         return list;
     }
 
+    /**
+     * Gets by id.
+     *
+     * @param <T> the type parameter
+     * @param id  the id
+     * @return the by id
+     */
     public <T> T getById(int id) {
         Session session = getSession();
         T entity = (T)session.get(type, id);
@@ -46,6 +71,11 @@
         return entity;
     }
 
+    /**
+     * Delete.
+     *
+     * @param entity the entity
+     */
     public void delete(T entity) {
         Session session = getSession();
         Transaction transaction = session.beginTransaction();
@@ -54,6 +84,12 @@
         session.close();
     }
 
+    /**
+     * Insert int.
+     *
+     * @param entity the entity
+     * @return the int
+     */
     public int insert(T entity) {
         int id = 0;
         Session session = getSession();
@@ -64,6 +100,11 @@
         return id;
     }
 
+    /**
+     * Save or update.
+     *
+     * @param entity the entity
+     */
     public void saveOrUpdate(T entity) {
         Session session = getSession();
         Transaction transaction = session.beginTransaction();
@@ -72,6 +113,13 @@
         session.close();
     }
 
+    /**
+     * Find by property equal list.
+     *
+     * @param propertyName the property name
+     * @param value        the value
+     * @return the list
+     */
     public List<T> findByPropertyEqual(String propertyName, Object value) {
         Session session = getSession();
         CriteriaBuilder builder = session.getCriteriaBuilder();
@@ -82,6 +130,12 @@
         return session.createQuery(query).getResultList();
     }
 
+    /**
+     * Find by property equal list.
+     *
+     * @param propertyMap the property map
+     * @return the list
+     */
     public List<T> findByPropertyEqual(Map<String, Object> propertyMap) {
         Session session = getSession();
         CriteriaBuilder builder = session.getCriteriaBuilder();
@@ -97,8 +151,7 @@
     }
 
     private Session getSession() {
-        return main.java.persistence.SessionFactoryProvider.getSessionFactory().openSession();
-
+        return persistence.SessionFactoryProvider.getSessionFactory().openSession();
     }
 }
 
Index: src/main/java/util/DaoFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.util;\n\nimport persistence.GenericDao;\n\n/**\n * Created by cvang on 3/31/2021.\n */\npublic class DaoFactory {\n\n\n    private DaoFactory() {\n\n    }\n\n    public static GenericDao createDao(Class type) {\n        return new GenericDao(type);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/DaoFactory.java b/src/main/java/util/DaoFactory.java
--- a/src/main/java/util/DaoFactory.java	(revision ea662576257434d5c7d001d2374ecdb20c3259d5)
+++ b/src/main/java/util/DaoFactory.java	(date 1617236301426)
@@ -1,4 +1,4 @@
-package main.java.util;
+package util;
 
 import persistence.GenericDao;
 
